/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN ModuleActionsGenerated.js PLEASE EDIT ../ModuleActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import ModuleApi from "../../../api/ModuleApi";

let actionsFunction = {

  //CRUD METHODS

  // Create module
  createModule: function(module) {
    return function(dispatch) {
      return ModuleApi
        .createModule(module)
        .then(module => {
          dispatch(actionsFunction.createModuleSuccess(module));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createModuleSuccess: function(module) {
    return { type: types.CREATE_MODULE_SUCCESS, payload: module };
  },


  // Delete module
  deleteModule: function(id) {
    return function(dispatch) {
      return ModuleApi
        .deleteModule(id)
        .then(module => {
          dispatch(actionsFunction.deleteModuleSuccess(module));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteModuleSuccess: function(module) {
    return { type: types.DELETE_MODULE_SUCCESS, payload: module };
  },


  // Find by mDescription
  findBymDescription: function(key) {
    return function(dispatch) {
      return ModuleApi
        .findBymDescription(key)
        .then(item => {
          dispatch(actionsFunction.findBymDescriptionSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findBymDescriptionSuccess: function(item) {
    return { type: types.FINDBYMDESCRIPTION_MODULE_SUCCESS, payload: item };
  },


  // Get module
  loadModule: function(id) {
    return function(dispatch) {
      return ModuleApi
        .getOneModule(id)
        .then(module => {
          dispatch(actionsFunction.loadModuleSuccess(module));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadModuleSuccess: function(module) {
    return { type: types.GET_MODULE_SUCCESS, payload: module };
  },

  // Load  list
  loadModuleList: function() {
    return function(dispatch) {
      return ModuleApi
        .getModuleList()
        .then(list => {
          dispatch(actionsFunction.loadModuleListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadModuleListSuccess: function(list) {
    return { type: types.LIST_MODULE_SUCCESS, payload: list };
  },

	
  // Save module
  saveModule: function(module) {
    return function(dispatch) {
      return ModuleApi
        .saveModule(module)
        .then(module => {
          dispatch(actionsFunction.saveModuleSuccess(module));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveModuleSuccess: function(module) {
    return { type: types.UPDATE_MODULE_SUCCESS, payload: module };
  },


};

export default actionsFunction;
